<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on Bikulov&#39;s blog</title>
    <link>https://bikulov.org/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on Bikulov&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Network Notes 2022</copyright>
    <lastBuildDate>Tue, 24 Dec 2013 22:44:00 +0300</lastBuildDate><atom:link href="https://bikulov.org/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Example of CMake file for CUDA&#43;CPP code</title>
      <link>https://bikulov.org/blog/2013/12/24/example-of-cmake-file-for-cuda-cpp-code/</link>
      <pubDate>Tue, 24 Dec 2013 22:44:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/12/24/example-of-cmake-file-for-cuda-cpp-code/</guid>
      <description>Makefiles are quite straightforward and easy to write (in reasonable situations). But GNU Make is not crossplafrom. CMake is cross-platform, cross-application (it can generate projects for different IDEs and Makefile itself).
It also allows you to split source directory and directory with intermediate files and compiled binary. Now CMake natively supports CUDA.
Here is CMakeLists.txt example I use (simply place it next to your source files to try yourself):
CMAKE_MINIMUM_REQUIRED(VERSION 2.</description>
    </item>
    
    <item>
      <title>throw() in function signature in C&#43;&#43;</title>
      <link>https://bikulov.org/blog/2013/11/23/throw-in-function-signature-in-c-/</link>
      <pubDate>Sat, 23 Nov 2013 17:42:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/11/23/throw-in-function-signature-in-c-/</guid>
      <description>There is base class exception in standard library (header &amp;lt;exception&amp;gt;). It has default constructor, copy constructor, copy operator and destructor and virtual what() function. Latter returns string with additional information about exception.
#include &amp;lt;exception&amp;gt;class MyException: public std::exception {  virtual const char* what() const throw()  {  return &amp;#34;My Exception happened&amp;#34;;  } } The most confusing part in the above code is throw(). It assures no exception will be thrown from the what() function.</description>
    </item>
    
    <item>
      <title>Sort strings from file in C&#43;&#43;</title>
      <link>https://bikulov.org/blog/2013/11/19/sort-strings-from-file-in-c-/</link>
      <pubDate>Tue, 19 Nov 2013 23:53:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/11/19/sort-strings-from-file-in-c-/</guid>
      <description>The very simple and common test program is to read bunch of strings from input file (let it be input.txt), sort them and write down to another file (output.txt). There is an implementation with small bug: it adds extra empty line. I&amp;rsquo;ve modified original code a bit, so now it works correctly (note: if have last empty line in the input, you will have an empty line in the output). Fixed code is provided below.</description>
    </item>
    
    <item>
      <title>Using CUDA C&#43;&#43; functions in Python via `*.so` and ctypes</title>
      <link>https://bikulov.org/blog/2013/10/01/using-cuda-c-functions-in-python-via-.so-and-ctypes/</link>
      <pubDate>Tue, 01 Oct 2013 08:33:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/10/01/using-cuda-c-functions-in-python-via-.so-and-ctypes/</guid>
      <description>I&amp;rsquo;d like to show how to use HPC part written on C++ with CUDA in Python code. So, every heavy part may be done on GPU with CUDA, all gluing tasks (with beautiful matplotlib plots) are done on CPU with Python.
We will use shared object, compiled from C++ CUDA code in Python. The only uncertain part here is conversation of types from «high-level» Python ones to «low-level» C++ ones. We will write application for parallel calculation of elementwise sum for two arrays.</description>
    </item>
    
  </channel>
</rss>
