<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awk on Bikulov&#39;s blog</title>
    <link>https://bikulov.org/tags/awk/</link>
    <description>Recent content in awk on Bikulov&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Network Notes 2022</copyright>
    <lastBuildDate>Thu, 01 Nov 2012 09:00:00 +0300</lastBuildDate><atom:link href="https://bikulov.org/tags/awk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Show N biggest directories in linux bash</title>
      <link>https://bikulov.org/blog/2012/11/01/show-n-biggest-directories-in-linux-bash/</link>
      <pubDate>Thu, 01 Nov 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/11/01/show-n-biggest-directories-in-linux-bash/</guid>
      <description>du (disk usage) utility in linux bash summarizes disk usage of each directory or file. By default, it outputs only directories. Just enter some dir and type
$ du ./ But if ./ has many subdirectories, output will be too long. And it is unsorted. The stated in the title task can be achieved by piping.
#&amp;nbsp;Sort output by size Cut the first line, it is size of the ./ dir as sum of other sizes Use &amp;ldquo;—human-readable&amp;rdquo; in du or divide by 1024 to get kbytes, mbytes, etc.</description>
    </item>
    
    <item>
      <title>Toggling string case in linux bash</title>
      <link>https://bikulov.org/blog/2012/10/31/toggling-string-case-in-linux-bash/</link>
      <pubDate>Wed, 31 Oct 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/10/31/toggling-string-case-in-linux-bash/</guid>
      <description>It’s quite an academic task, but anyway useful sometimes. I’ve collected different ways to do it in terminal in linux. Some of them work with UTF-8 characters (some it will toggle case for &amp;ldquo;й&amp;rdquo;, &amp;ldquo;ё&amp;rdquo; and so on. It will not in general handle special ligatures, such as &amp;ldquo;ß&amp;rdquo;&amp;quot; and &amp;ldquo;ﬁ&amp;rdquo;.)
Ways are: sed, perl, python, awk, tr, bash, dd.
#&amp;nbsp;Using sed Works with UTF-8 characters.
It is quite straightforward and allows to add custom rules easily.</description>
    </item>
    
    <item>
      <title>AWK: a powerful tool for programmer</title>
      <link>https://bikulov.org/blog/2012/10/25/awk-a-powerful-tool-for-programmer/</link>
      <pubDate>Thu, 25 Oct 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/10/25/awk-a-powerful-tool-for-programmer/</guid>
      <description>AWK is an acronym of first letters of its authors (Aho, Weinberger and Kernighan). It is a data-manipulating scripting language with huge possibilities. There are several implementations of it: awk is a canonical one, nawk (new awk), mawk (default in Ubuntu 12.04), gawk is GNU awk. I recommend latter one, because it works correct with unicode symbols in example:
$ echo юникод | gawk &amp;#34;{res = toupper(\$1); print res;}&amp;#34; ЮНИКОД #&amp;nbsp;Basic usage Most useful feature is writing script files to be loaded in awk later.</description>
    </item>
    
  </channel>
</rss>
