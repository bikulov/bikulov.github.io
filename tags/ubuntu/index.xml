<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ubuntu on Bikulov&#39;s blog</title>
    <link>https://bikulov.org/tags/ubuntu/</link>
    <description>Recent content in ubuntu on Bikulov&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Network Notes 2022</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 09:30:00 +0300</lastBuildDate><atom:link href="https://bikulov.org/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to setup own selfhosted wiki</title>
      <link>https://bikulov.org/blog/2021/02/02/how-to-setup-own-selfhosted-wiki/</link>
      <pubDate>Tue, 02 Feb 2021 09:30:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2021/02/02/how-to-setup-own-selfhosted-wiki/</guid>
      <description>Disclaimer: many links in this post are referral. If you are uncomfortable with it, just search for the text in the links and use results from the search engines.
#&amp;nbsp;Plan  Spin up a new virtual server (1 CPU + 1 GB RAM is fairly enough) in Vultr, Digital Ocean, etc. Register a new domain name Install Docker and Docker Compose Use docker-compose to deploy a wiki Backups  #&amp;nbsp;Virtual server For example, let it be Digital Ocean.</description>
    </item>
    
    <item>
      <title>WireGuard on Ubuntu (server) and Android (client)</title>
      <link>https://bikulov.org/blog/2019/12/22/wireguard-on-ubuntu-server-and-android-client/</link>
      <pubDate>Sun, 22 Dec 2019 02:30:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2019/12/22/wireguard-on-ubuntu-server-and-android-client/</guid>
      <description>WireGuard is lightweight VPN with extremely simple configuration. All below was tested on Ubuntu 18.04 as server and Anroid 8.0.0 as client.
#&amp;nbsp;Server Installation from official ppa:
apt-add-repository ppa:wireguard/wireguard apt update apt install wireguard Client and server authenticate each other with asymmetric keys (like in SSH). Keys are generated with management utility wg:
wg genkey This will be server auth key (client auth key can be generated with the same command or in mobile application, you will need public part in config).</description>
    </item>
    
    <item>
      <title>Tips for LXC 2: unprivileged containers</title>
      <link>https://bikulov.org/blog/2016/08/19/tips-for-lxc-2-unprivileged-containers/</link>
      <pubDate>Fri, 19 Aug 2016 18:26:36 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2016/08/19/tips-for-lxc-2-unprivileged-containers/</guid>
      <description>LXC containers are great for application isolation and safe deployment. Running unprivileged containers is the safest way to run containers in a production environment. This note contains enough information to create your own safe container.
Install LXC:
apt-get install -y lxc Now create non-root system user for lxc:
useradd --home-dir /srv/lxc --create-home lxc echo &amp;#34;lxc veth lxcbr0 2&amp;#34; | sudo tee -a /etc/lxc/lxc-usernet passwd lxc &amp;lt;type password&amp;gt; I recommend to add autostart as default behaviour:</description>
    </item>
    
    <item>
      <title>Script for user configurations generation and sending at Ubuntu OpenVPN server</title>
      <link>https://bikulov.org/blog/2016/01/05/script-for-user-configurations-generation-and-sending-at-ubuntu-openvpn-server/</link>
      <pubDate>Tue, 05 Jan 2016 23:07:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2016/01/05/script-for-user-configurations-generation-and-sending-at-ubuntu-openvpn-server/</guid>
      <description>Ubuntu has a very detailed documentation about OpenVPN server configuration. The key feature of this note is script for automatic generation of single-file client configurations (keys and certs are embedded) and sending them by email. Looks interesting? Read below!
#&amp;nbsp;Prerequisities All commands in this section must be executed as root user.
Update package list:
apt-get update apt-get -y upgrade Install needed packages (easy-rsa must be installed explicitly on modern Ubuntus):</description>
    </item>
    
    <item>
      <title>Install Jupyter Notebook and Scientific Environment in Ubuntu 14.04 With Python 3</title>
      <link>https://bikulov.org/blog/2015/11/07/install-jupyter-notebook-and-scientific-environment-in-ubuntu-14.04-with-python-3/</link>
      <pubDate>Sat, 07 Nov 2015 11:24:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/11/07/install-jupyter-notebook-and-scientific-environment-in-ubuntu-14.04-with-python-3/</guid>
      <description>Several changes occured since my last note about installing python scientific environment:
 IPython Notebook was succeeded by Jupyter Notebook seaborn package is used for the pretty matplotlib plots raw virtualenv was replaced by virtualenvwrapper procedure of notebook profiles creation and edition has been changed ipython bug about pip in virtualenv is obsolete. But now another workaround is needed for packahes installation pip installation from pypa is now one-liner  Install prerequisities as root:</description>
    </item>
    
    <item>
      <title>Animations from scientific data using Paraview 4.3 and python</title>
      <link>https://bikulov.org/blog/2015/04/05/animations-from-scientific-data-using-paraview-4.3-and-python/</link>
      <pubDate>Sun, 05 Apr 2015 16:31:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/04/05/animations-from-scientific-data-using-paraview-4.3-and-python/</guid>
      <description>#&amp;nbsp;Create frames This note describes usage of Paraview 4.3 (contrary to previous note with Paraview before 4.1). Some changes were made:
 command line arguments were added to make code more reusable it works with Paraview extracted from the archive (4.3.1) white background must be specified manually (SetViewProperties(view, Background = [1, 1, 1]) in the code)  Script is tested under Ubuntu 14.04 with Paraview 4.3.1. Paraview was downloaded from official site and extracted to /home/bikulov/bin/ParaView-4.</description>
    </item>
    
    <item>
      <title>Install CUDA 6.5 on clean Ubuntu 14.04</title>
      <link>https://bikulov.org/blog/2015/02/28/install-cuda-6.5-on-clean-ubuntu-14.04/</link>
      <pubDate>Sat, 28 Feb 2015 08:54:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/02/28/install-cuda-6.5-on-clean-ubuntu-14.04/</guid>
      <description>Lately NVIDIA added repository for Ubuntu 12.04 and Ubuntu 14.04. Recently I hit problem with missing dependencies for libcheese-gtk23 and libcheese7 libraries while installing latest CUDA 6.5 on clean Ubuntu 14.04. Remedy to this can be found on askubuntu. So, the complete set of commands is below.
At first, add CUDA repository package:
wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_6.5-14_amd64.deb sudo dpkg -i cuda-repo-ubuntu1404_6.5-14_amd64.deb Now, install CUDA:
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade  # install nvidia driver sudo apt-get install nvidia-current # at this point you need to reboot computer  # remove broken packages, beware: some GUI parts of your system will be broken or removed sudo apt-get remove libcheese*  # install CUDA sudo apt-get install cuda  # restore broken GUI parts sudo apt-get install ubuntu-desktop By the way, libcheese is library for video and photo capturing, including enumeration of capturing devices.</description>
    </item>
    
    <item>
      <title>Tips for LXC: creation, autostart, OpenVPN and port forwarding to containers</title>
      <link>https://bikulov.org/blog/2014/10/09/tips-for-lxc-creation-autostart-openvpn-and-port-forwarding-to-containers/</link>
      <pubDate>Thu, 09 Oct 2014 10:02:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/10/09/tips-for-lxc-creation-autostart-openvpn-and-port-forwarding-to-containers/</guid>
      <description>I&amp;rsquo;ve completed setting up my comfort set of LXC containers and want to save some points I spent a lot of time for or things for copy-paste.
I used the official Ubuntu Server Guide but note at Digital Ocean knowledge base also helped me a lot. I created 3 containers: one for vpn, one for site on Drupal and last one as www proxy for second one with nginx only.</description>
    </item>
    
    <item>
      <title>Setup Drupal 7 with nginx and PostgreSQL on Ubuntu 14.04</title>
      <link>https://bikulov.org/blog/2014/08/09/setup-drupal-7-with-nginx-and-postgresql-on-ubuntu-14.04/</link>
      <pubDate>Sat, 09 Aug 2014 17:34:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/08/09/setup-drupal-7-with-nginx-and-postgresql-on-ubuntu-14.04/</guid>
      <description>This note is similar to previous drupal and joomla installations. Install requirements (webserver, php5, DB server, DB adapter for php) as root:
apt-get install -y nginx php5-fpm nginx postgresql php5-pgsql php5-gd Create user and database (replace USER with desired username and HOSTNAME_db with database name, we will need this values in Drupal setup later) for future site:
sudo -u postgres -i createuser USER --pwprompt --encrypted createdb HOSTNAME_db exit Now setup nginx.</description>
    </item>
    
    <item>
      <title>Install up-to-date scientific environment in Ubuntu 14.04 with Python 3.4</title>
      <link>https://bikulov.org/blog/2014/05/14/install-up-to-date-scientific-environment-in-ubuntu-14.04-with-python-3.4/</link>
      <pubDate>Wed, 14 May 2014 16:16:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/05/14/install-up-to-date-scientific-environment-in-ubuntu-14.04-with-python-3.4/</guid>
      <description>Note: I&amp;rsquo;ve created an updated page with most recent instructions for Jupyter Notebook.
I use IPython notebook for processing numerical experiments results and plotting. The default Python 3 in Ubuntu 14.04 is 3.4, so it is easier to install really up-to-date bunch of software.
Full set of commands you need to install recent ipython notebook, numpy, scipy, etc in virtual environment almost without affecting shiny-new Ubuntu 14.04.
#!/usr/bin/env bash  sudo su # install python development packages and g++ apt-get install -y python3-dev g++  # install dependencies for scipy apt-get install -y libblas-dev liblapack-dev gfortran  # install dependencies for matplotlib apt-get install -y libfreetype6-dev libpng-dev exit  # ipython notebook has bug: # https://bugs.</description>
    </item>
    
    <item>
      <title>Install and configure btsync in Ubuntu 12.04</title>
      <link>https://bikulov.org/blog/2013/08/26/install-and-configure-btsync-in-ubuntu-12.04/</link>
      <pubDate>Mon, 26 Aug 2013 18:42:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/26/install-and-configure-btsync-in-ubuntu-12.04/</guid>
      <description>This note describes installation of Bittorrent Sync on Ubuntu. Tutorial was tested on Ubuntu 12.04, but it must work for all Debian-based systems. Read full btsync manual for advanced information.
#&amp;nbsp;Download and install btsync Btsync is provided as single binary file. We will place it into /usr/bin directory. So, download archive with binary file, extract it, remove archive, move binary:
wget http://btsync.s3-website-us-east-1.amazonaws.com/btsync_x64.tar.gz tar xf btsync_x64.tar.gz rm btsync_x64.tar.gz sudo mv btsync /usr/bin/btsync #&amp;nbsp;Configure shared folder We will use configuration file instead of web interface.</description>
    </item>
    
    <item>
      <title>Setting up Joomla 3.1.5 with PostgreSQL on Ubuntu 13.04</title>
      <link>https://bikulov.org/blog/2013/08/19/setting-up-joomla-3.1.5-with-postgresql-on-ubuntu-13.04/</link>
      <pubDate>Mon, 19 Aug 2013 16:15:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/19/setting-up-joomla-3.1.5-with-postgresql-on-ubuntu-13.04/</guid>
      <description>#&amp;nbsp;Installing dependencies Firstly you need to install webserver, php-related stuff and database server (we use PostgreSQL).
apt-get install -y php5-fpm nginx postgresql php5-pgsql Now download and install Joomla (currently 3.1.5 is the latest). Please, update following lines with latest version if nescessary:
cd /srv wget http://joomlacode.org/gf/download/frsrelease/18622/83487/Joomla_3.1.5-Stable-Full_Package.zip unzip Joomla_3.1.5-Stable-Full_Package.zip -d joomla chown -R www-data:www-data joomla #&amp;nbsp;Database setup The only two things you need to do is to create user (joomla in example) and database (joomla in example).</description>
    </item>
    
    <item>
      <title>Enable tun for OpenVZ Ubuntu 12.04 containers in CentOS 6.4</title>
      <link>https://bikulov.org/blog/2013/08/10/enable-tun-for-openvz-ubuntu-12.04-containers-in-centos-6.4/</link>
      <pubDate>Sat, 10 Aug 2013 09:14:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/10/enable-tun-for-openvz-ubuntu-12.04-containers-in-centos-6.4/</guid>
      <description>To enable tun device in OpenVZ containers tun module
 needs to be loaded in the host system (in my case CentOS 6.4) containter (in my case Ubuntu Server 12.04) must be allowed to use tun  I&amp;rsquo;ve grabbed container configuration from askbuntu.
#&amp;nbsp;Load tun after boot automatically Edit tun.modules:
# vim /etc/sysconfig/modules/tun.modules #!/bin/sh /sbin/modprobe tun Set permissions for tun.modules:
chmod 755 /etc/sysconfig/modules/tun.modules Reboot host system and test tun module loaded:</description>
    </item>
    
    <item>
      <title>Configuring Ubuntu 12.04 in OpenVZ on CentOS 6.4</title>
      <link>https://bikulov.org/blog/2013/08/08/configuring-ubuntu-12.04-in-openvz-on-centos-6.4/</link>
      <pubDate>Thu, 08 Aug 2013 20:54:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/08/configuring-ubuntu-12.04-in-openvz-on-centos-6.4/</guid>
      <description>This howto is based on two sources: Official wiki and Amutu blog entry. In short, the main difficulty is in bridge network configuration: correct network configuration doesn&amp;rsquo;t work in CentOS 6.4 while NetworkManager is running. I compiled official documentation and fix found in Amutu blog here in one entry.
I assume you have clean installed CentOS. I tried all on x32 hardware, so you may need to fix container type in container creation section if you use x64 CentOS.</description>
    </item>
    
    <item>
      <title>Creating Zip With VPN Client Keys and Configuration Files</title>
      <link>https://bikulov.org/blog/2013/07/31/creating-zip-with-vpn-client-keys-and-configuration-files/</link>
      <pubDate>Wed, 31 Jul 2013 09:31:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/07/31/creating-zip-with-vpn-client-keys-and-configuration-files/</guid>
      <description>Depends on server configuration, each OpenVPN client needs configuration file (client.conf for *nix and client.ovpn for windows), certificate authority (ca.crt), [optional] tls auth file (ta.key), user crt and key.
Typical OpenVPN client configuration file looks like (ca and ta files in server subdirectory):
client remote &amp;lt;vpn server address&amp;gt; port 1194 proto udp dev tun dev-type tun ns-cert-type server reneg-sec 86400 comp-lzo yes verb 3 ca server/ca.crt cert &amp;lt;user crt&amp;gt; key &amp;lt;user key&amp;gt; tls-auth server/ta.</description>
    </item>
    
    <item>
      <title>Ubuntu Server 12.04 &#43; Slurm 2.5.7 fatnodes</title>
      <link>https://bikulov.org/blog/2013/06/18/ubuntu-server-12.04--slurm-2.5.7-fatnodes/</link>
      <pubDate>Tue, 18 Jun 2013 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/06/18/ubuntu-server-12.04--slurm-2.5.7-fatnodes/</guid>
      <description>SLURM (Simple Linux Utility for Resource Management) — job scheduler and resource manager usually installed on supercomputers. For example, it runs on Lomonosov supercomputer in MSU, Moscow, Russia.
Usually one physical or virtual computer (physical node) is one logical node is SLURM. If one physical node serve more than one logical nodes, it called «fat node». Fat nodes are needed in case you have a lot of memory at physical node or several GPUs on it.</description>
    </item>
    
    <item>
      <title>Ubuntu Server 12.04 &#43; Drupal 7 &#43; nginx &#43; MySQL</title>
      <link>https://bikulov.org/blog/2013/04/28/ubuntu-server-12.04--drupal-7--nginx--mysql/</link>
      <pubDate>Sun, 28 Apr 2013 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/04/28/ubuntu-server-12.04--drupal-7--nginx--mysql/</guid>
      <description>Default Drupal package in Ubuntu installs Apache, but I prefer nginx as a webserver. In this note I’ll describe steps necessary to get Drupal 7 work.
All variables in square brackets must be replaced by your names or passwords.
Site will be available at url [sitename].
#&amp;nbsp;Installing packages Install all necessary packages:
sudo apt-get install -y nginx php5-fpm php-apc php5-mysql mysql-client-core-5.5 mysql-server php5-gd During the installation MySQL will ask you for root password.</description>
    </item>
    
    <item>
      <title>Get rid of Desktop window while launching Nautilus in i3</title>
      <link>https://bikulov.org/blog/2012/11/08/get-rid-of-desktop-window-while-launching-nautilus-in-i3/</link>
      <pubDate>Thu, 08 Nov 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/11/08/get-rid-of-desktop-window-while-launching-nautilus-in-i3/</guid>
      <description>In i3 window manager by default Nautilus actually opens two windows: Desktop window and Nautilus itself. The former can’t be closed by the default shortcut $Mod+Shift+Q.
To get rid of unwanted window, set desktop.background and show-desktop-icons to false by typing:
$ gsettings set org.gnome.desktop.background show-desktop-icons false </description>
    </item>
    
    <item>
      <title>Setting up RhodeCode on Ubuntu 12.04</title>
      <link>https://bikulov.org/blog/2012/10/29/setting-up-rhodecode-on-ubuntu-12.04/</link>
      <pubDate>Mon, 29 Oct 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/10/29/setting-up-rhodecode-on-ubuntu-12.04/</guid>
      <description>This howto is based on a great guide with modifications. All settings are made for server domain hg.kenarius.org. You can replace it with your one easily.
#&amp;nbsp;Preparation #&amp;nbsp;Ubuntu Update Ubuntu with the commands:
sudo apt-get update sudo apt-get upgrade Install pip and virtualenv with the commands:
sudo apt-get install python-pip sudo pip install virtualenv #&amp;nbsp;Nginx Install nginx:
sudo apt-get install nginx Add create ssl certificates:
sudo openssl req -new -x509 -days 9999 -nodes -out host.</description>
    </item>
    
    <item>
      <title>Daily backups (files &#43; mysql) to yandex.disk in Ubuntu 12.04</title>
      <link>https://bikulov.org/blog/2012/08/30/daily-backups-files--mysql-to-yandex.disk-in-ubuntu-12.04/</link>
      <pubDate>Thu, 30 Aug 2012 09:30:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/08/30/daily-backups-files--mysql-to-yandex.disk-in-ubuntu-12.04/</guid>
      <description>We all do backups. This note is about doing them on Ubuntu 12.04.
Tasks:
 archive important folders dump mysql databases upload all to yandex.disk (online web storage with 10GB space) delete old backups  I’ll save only backups for last five days.
#&amp;nbsp;Archiving There are many different backup tools, see wiki list. I’ve chosen DAR.
One can install it in Ubuntu 12.04 by typing
# apt-get install dar It is a console utility and it can be confusing for beginner.</description>
    </item>
    
    <item>
      <title>Fixing missing icons in PCManFM</title>
      <link>https://bikulov.org/blog/2012/08/24/fixing-missing-icons-in-pcmanfm/</link>
      <pubDate>Fri, 24 Aug 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/08/24/fixing-missing-icons-in-pcmanfm/</guid>
      <description>After moving to i3 I’ve installed PCManFM as GUI file manager. To fix missing icons one have to define icon theme. These instructions are tested on Ubuntu 12.04, but it must work with other distros.
Install icon theme:
sudo apt-get install tango-icon-theme* To apply theme, create .gtkrc-2.0 file in home directory:
$ cat ~/.gtkrc-2.0 gtk-icon-theme-name = &amp;#34;Tango&amp;#34; After this icons will be enabled.</description>
    </item>
    
  </channel>
</rss>
