<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Bikulov&#39;s blog</title>
    <link>https://bikulov.org/tags/python/</link>
    <description>Recent content in python on Bikulov&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Network Notes 2022</copyright>
    <lastBuildDate>Fri, 22 Feb 2019 00:30:00 +0300</lastBuildDate><atom:link href="https://bikulov.org/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python program template</title>
      <link>https://bikulov.org/blog/2019/02/22/python-program-template/</link>
      <pubDate>Fri, 22 Feb 2019 00:30:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2019/02/22/python-program-template/</guid>
      <description>For every simple python script you need same simple parts:
 command line arguments parsing logging [optional] submodules [optional] building to a binary  I&amp;rsquo;ve prepared a simple python project with all these parts to use as template. It is available on github.
Command line arguments parsing is done in parse_arguments. The most interesting thing there is setting default fuctions for submodules (and None for main module). It looks like:</description>
    </item>
    
    <item>
      <title>Python sorting objects of user defined class</title>
      <link>https://bikulov.org/blog/2017/03/11/python-sorting-objects-of-user-defined-class/</link>
      <pubDate>Sat, 11 Mar 2017 23:32:41 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2017/03/11/python-sorting-objects-of-user-defined-class/</guid>
      <description>The most common way of sorting collections of custom objects in Python is to provide key function that is used to extract a comparison key from each element:
sorted(&amp;#34;Case insensitive Sorting is here&amp;#34;.split(), key=str.lower) But sorted function compares objects by its nature, and it is possible to define comparison operators for your class t make sorted work automatically.
Documentation guarantees that sorting uses only __lt__() method:
 The sort routines are guaranteed to use __lt__() when making comparisons between two objects.</description>
    </item>
    
    <item>
      <title>Install Jupyter Notebook and Scientific Environment in Ubuntu 14.04 With Python 3</title>
      <link>https://bikulov.org/blog/2015/11/07/install-jupyter-notebook-and-scientific-environment-in-ubuntu-14.04-with-python-3/</link>
      <pubDate>Sat, 07 Nov 2015 11:24:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/11/07/install-jupyter-notebook-and-scientific-environment-in-ubuntu-14.04-with-python-3/</guid>
      <description>Several changes occured since my last note about installing python scientific environment:
 IPython Notebook was succeeded by Jupyter Notebook seaborn package is used for the pretty matplotlib plots raw virtualenv was replaced by virtualenvwrapper procedure of notebook profiles creation and edition has been changed ipython bug about pip in virtualenv is obsolete. But now another workaround is needed for packahes installation pip installation from pypa is now one-liner  Install prerequisities as root:</description>
    </item>
    
    <item>
      <title>Animations from scientific data using Paraview 4.3 and python</title>
      <link>https://bikulov.org/blog/2015/04/05/animations-from-scientific-data-using-paraview-4.3-and-python/</link>
      <pubDate>Sun, 05 Apr 2015 16:31:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/04/05/animations-from-scientific-data-using-paraview-4.3-and-python/</guid>
      <description>#&amp;nbsp;Create frames This note describes usage of Paraview 4.3 (contrary to previous note with Paraview before 4.1). Some changes were made:
 command line arguments were added to make code more reusable it works with Paraview extracted from the archive (4.3.1) white background must be specified manually (SetViewProperties(view, Background = [1, 1, 1]) in the code)  Script is tested under Ubuntu 14.04 with Paraview 4.3.1. Paraview was downloaded from official site and extracted to /home/bikulov/bin/ParaView-4.</description>
    </item>
    
    <item>
      <title>Create video illustrations from numerical experiments data with Paraview and Python 2</title>
      <link>https://bikulov.org/blog/2014/11/15/create-video-illustrations-from-numerical-experiments-data-with-paraview-and-python-2/</link>
      <pubDate>Sat, 15 Nov 2014 01:56:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/11/15/create-video-illustrations-from-numerical-experiments-data-with-paraview-and-python-2/</guid>
      <description>See updated note.
One of the common tasks in computer modeling is visualization of numerical experiment as a movie. Usually it is one datafile per frame and target is to create frame-by-frame animation. If these files can be loaded and visualized in Paraview, it is easy to create the full video: load file in paraview with predefined parameters, create screenshot, load second file, etc. This process may be automated.
We will use latest stable build of Paraview from official site.</description>
    </item>
    
    <item>
      <title>Install up-to-date scientific environment in Ubuntu 14.04 with Python 3.4</title>
      <link>https://bikulov.org/blog/2014/05/14/install-up-to-date-scientific-environment-in-ubuntu-14.04-with-python-3.4/</link>
      <pubDate>Wed, 14 May 2014 16:16:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/05/14/install-up-to-date-scientific-environment-in-ubuntu-14.04-with-python-3.4/</guid>
      <description>Note: I&amp;rsquo;ve created an updated page with most recent instructions for Jupyter Notebook.
I use IPython notebook for processing numerical experiments results and plotting. The default Python 3 in Ubuntu 14.04 is 3.4, so it is easier to install really up-to-date bunch of software.
Full set of commands you need to install recent ipython notebook, numpy, scipy, etc in virtual environment almost without affecting shiny-new Ubuntu 14.04.
#!/usr/bin/env bash  sudo su # install python development packages and g++ apt-get install -y python3-dev g++  # install dependencies for scipy apt-get install -y libblas-dev liblapack-dev gfortran  # install dependencies for matplotlib apt-get install -y libfreetype6-dev libpng-dev exit  # ipython notebook has bug: # https://bugs.</description>
    </item>
    
    <item>
      <title>Set application version in gengetopt config based on Mercurial revision</title>
      <link>https://bikulov.org/blog/2013/11/02/set-application-version-in-gengetopt-config-based-on-mercurial-revision/</link>
      <pubDate>Sat, 02 Nov 2013 21:53:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/11/02/set-application-version-in-gengetopt-config-based-on-mercurial-revision/</guid>
      <description>Previously I wrote about gengetopt tool to parse command line arguments. There was a line about application version.
version &amp;#34;13.10.25&amp;#34; It is important to keep this line up to date every time you compile and deploy binary.
I suggest to use Python script for this. Preliminaries: hg id -n returns local revision number, hg id -i returns global revision id. Combining date, local revision and global revision I generate version enough to determine source files used to create binary.</description>
    </item>
    
    <item>
      <title>Creation of paper-ready plots with matlotlib</title>
      <link>https://bikulov.org/blog/2013/10/03/creation-of-paper-ready-plots-with-matlotlib/</link>
      <pubDate>Thu, 03 Oct 2013 10:37:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/10/03/creation-of-paper-ready-plots-with-matlotlib/</guid>
      <description>I used to utilize gnuplot for creation of plots with arbitrary data. The main problem was to postprocess data before plotting: I had to integrate postprocess into calculation code itself or to write additional script to do so. I&amp;rsquo;d like to provide an example of good-looking plotting with Python and matplotlib. Python has bataries included, so there will be no problem with preparation of data to be plotted.
Example script plot_example.</description>
    </item>
    
    <item>
      <title>Using CUDA C&#43;&#43; functions in Python via `*.so` and ctypes</title>
      <link>https://bikulov.org/blog/2013/10/01/using-cuda-c-functions-in-python-via-.so-and-ctypes/</link>
      <pubDate>Tue, 01 Oct 2013 08:33:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/10/01/using-cuda-c-functions-in-python-via-.so-and-ctypes/</guid>
      <description>I&amp;rsquo;d like to show how to use HPC part written on C++ with CUDA in Python code. So, every heavy part may be done on GPU with CUDA, all gluing tasks (with beautiful matplotlib plots) are done on CPU with Python.
We will use shared object, compiled from C++ CUDA code in Python. The only uncertain part here is conversation of types from «high-level» Python ones to «low-level» C++ ones. We will write application for parallel calculation of elementwise sum for two arrays.</description>
    </item>
    
    <item>
      <title>Email notification if IP is changed with Python and cron</title>
      <link>https://bikulov.org/blog/2013/09/09/email-notification-if-ip-is-changed-with-python-and-cron/</link>
      <pubDate>Mon, 09 Sep 2013 23:24:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/09/09/email-notification-if-ip-is-changed-with-python-and-cron/</guid>
      <description>This Python script retrieves computer&amp;rsquo;s external IP address (using internet.yandex.ru) and emails message with new IP if IP has been changed since last check. BeautifulSoup module is needed, so install it if you have no installed version:
sudo pip install beautifulsoup Script:
#!/usr/bin/env python  from BeautifulSoup import BeautifulSoup import urllib2 import re import smtplib from email.mime.text import MIMEText  logFile = &amp;#39;/var/log/ippywatchdog.log&amp;#39;  request = urllib2.urlopen(&amp;#39;http://internet.yandex.ru&amp;#39;)  soup = BeautifulSoup(request) yandexIpResponse = soup.</description>
    </item>
    
    <item>
      <title>Toggling string case in linux bash</title>
      <link>https://bikulov.org/blog/2012/10/31/toggling-string-case-in-linux-bash/</link>
      <pubDate>Wed, 31 Oct 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/10/31/toggling-string-case-in-linux-bash/</guid>
      <description>It’s quite an academic task, but anyway useful sometimes. I’ve collected different ways to do it in terminal in linux. Some of them work with UTF-8 characters (some it will toggle case for &amp;ldquo;й&amp;rdquo;, &amp;ldquo;ё&amp;rdquo; and so on. It will not in general handle special ligatures, such as &amp;ldquo;ß&amp;rdquo;&amp;quot; and &amp;ldquo;ﬁ&amp;rdquo;.)
Ways are: sed, perl, python, awk, tr, bash, dd.
#&amp;nbsp;Using sed Works with UTF-8 characters.
It is quite straightforward and allows to add custom rules easily.</description>
    </item>
    
    <item>
      <title>Blender and Python molecules visualization</title>
      <link>https://bikulov.org/blog/2012/04/11/blender-and-python-molecules-visualization/</link>
      <pubDate>Wed, 11 Apr 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/04/11/blender-and-python-molecules-visualization/</guid>
      <description>Blender is a free software for 3D graphics. In old virsions many operations were binded to hotkeys, so it was believed that Blender is very hard to master. Now it has more userfriendly interface with button in addition to hotkeys.
One of the most useful features of Blender is scripting. Below I provide python script for drawing molecules with cylinders and spheres.
Command to draw a sphere:
bpy.ops.mesh.primitive_uv_sphere_add() To draw a cylinder, you need to specify cylinder center and rotation.</description>
    </item>
    
  </channel>
</rss>
