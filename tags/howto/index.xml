<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>howto on Bikulov&#39;s blog</title>
    <link>https://bikulov.org/tags/howto/</link>
    <description>Recent content in howto on Bikulov&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Network Notes 2022</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 09:30:00 +0300</lastBuildDate><atom:link href="https://bikulov.org/tags/howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to setup own selfhosted wiki</title>
      <link>https://bikulov.org/blog/2021/02/02/how-to-setup-own-selfhosted-wiki/</link>
      <pubDate>Tue, 02 Feb 2021 09:30:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2021/02/02/how-to-setup-own-selfhosted-wiki/</guid>
      <description>Disclaimer: many links in this post are referral. If you are uncomfortable with it, just search for the text in the links and use results from the search engines.
#&amp;nbsp;Plan  Spin up a new virtual server (1 CPU + 1 GB RAM is fairly enough) in Vultr, Digital Ocean, etc. Register a new domain name Install Docker and Docker Compose Use docker-compose to deploy a wiki Backups  #&amp;nbsp;Virtual server For example, let it be Digital Ocean.</description>
    </item>
    
    <item>
      <title>WireGuard on Ubuntu (server) and Android (client)</title>
      <link>https://bikulov.org/blog/2019/12/22/wireguard-on-ubuntu-server-and-android-client/</link>
      <pubDate>Sun, 22 Dec 2019 02:30:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2019/12/22/wireguard-on-ubuntu-server-and-android-client/</guid>
      <description>WireGuard is lightweight VPN with extremely simple configuration. All below was tested on Ubuntu 18.04 as server and Anroid 8.0.0 as client.
#&amp;nbsp;Server Installation from official ppa:
apt-add-repository ppa:wireguard/wireguard apt update apt install wireguard Client and server authenticate each other with asymmetric keys (like in SSH). Keys are generated with management utility wg:
wg genkey This will be server auth key (client auth key can be generated with the same command or in mobile application, you will need public part in config).</description>
    </item>
    
    <item>
      <title>Tips for LXC 2: unprivileged containers</title>
      <link>https://bikulov.org/blog/2016/08/19/tips-for-lxc-2-unprivileged-containers/</link>
      <pubDate>Fri, 19 Aug 2016 18:26:36 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2016/08/19/tips-for-lxc-2-unprivileged-containers/</guid>
      <description>LXC containers are great for application isolation and safe deployment. Running unprivileged containers is the safest way to run containers in a production environment. This note contains enough information to create your own safe container.
Install LXC:
apt-get install -y lxc Now create non-root system user for lxc:
useradd --home-dir /srv/lxc --create-home lxc echo &amp;#34;lxc veth lxcbr0 2&amp;#34; | sudo tee -a /etc/lxc/lxc-usernet passwd lxc &amp;lt;type password&amp;gt; I recommend to add autostart as default behaviour:</description>
    </item>
    
    <item>
      <title>Script for user configurations generation and sending at Ubuntu OpenVPN server</title>
      <link>https://bikulov.org/blog/2016/01/05/script-for-user-configurations-generation-and-sending-at-ubuntu-openvpn-server/</link>
      <pubDate>Tue, 05 Jan 2016 23:07:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2016/01/05/script-for-user-configurations-generation-and-sending-at-ubuntu-openvpn-server/</guid>
      <description>Ubuntu has a very detailed documentation about OpenVPN server configuration. The key feature of this note is script for automatic generation of single-file client configurations (keys and certs are embedded) and sending them by email. Looks interesting? Read below!
#&amp;nbsp;Prerequisities All commands in this section must be executed as root user.
Update package list:
apt-get update apt-get -y upgrade Install needed packages (easy-rsa must be installed explicitly on modern Ubuntus):</description>
    </item>
    
    <item>
      <title>Install Jupyter Notebook and Scientific Environment in Ubuntu 14.04 With Python 3</title>
      <link>https://bikulov.org/blog/2015/11/07/install-jupyter-notebook-and-scientific-environment-in-ubuntu-14.04-with-python-3/</link>
      <pubDate>Sat, 07 Nov 2015 11:24:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/11/07/install-jupyter-notebook-and-scientific-environment-in-ubuntu-14.04-with-python-3/</guid>
      <description>Several changes occured since my last note about installing python scientific environment:
 IPython Notebook was succeeded by Jupyter Notebook seaborn package is used for the pretty matplotlib plots raw virtualenv was replaced by virtualenvwrapper procedure of notebook profiles creation and edition has been changed ipython bug about pip in virtualenv is obsolete. But now another workaround is needed for packahes installation pip installation from pypa is now one-liner  Install prerequisities as root:</description>
    </item>
    
    <item>
      <title>Scan images from command line in Linux</title>
      <link>https://bikulov.org/blog/2015/09/26/scan-images-from-command-line-in-linux/</link>
      <pubDate>Sat, 26 Sep 2015 20:05:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/09/26/scan-images-from-command-line-in-linux/</guid>
      <description>Console utilities in Linuxes are cool: mcabber for jabber, mutt for mail, mocp for music, vim to rule them all! This note is about scaning from the console (I assume your scanner is already set-up). Aim is to scan document with good quality into pdf with reasonable size.
Scanning is done by scanimage utility:
scanimage --resolution 300 --mode Color --format tiff &amp;gt; document.tiff If there is more than one scanner in your system, list them all by scanimage -L commant and use specify name with --device-name argument.</description>
    </item>
    
    <item>
      <title>Animations from scientific data using Paraview 4.3 and python</title>
      <link>https://bikulov.org/blog/2015/04/05/animations-from-scientific-data-using-paraview-4.3-and-python/</link>
      <pubDate>Sun, 05 Apr 2015 16:31:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/04/05/animations-from-scientific-data-using-paraview-4.3-and-python/</guid>
      <description>#&amp;nbsp;Create frames This note describes usage of Paraview 4.3 (contrary to previous note with Paraview before 4.1). Some changes were made:
 command line arguments were added to make code more reusable it works with Paraview extracted from the archive (4.3.1) white background must be specified manually (SetViewProperties(view, Background = [1, 1, 1]) in the code)  Script is tested under Ubuntu 14.04 with Paraview 4.3.1. Paraview was downloaded from official site and extracted to /home/bikulov/bin/ParaView-4.</description>
    </item>
    
    <item>
      <title>Install CUDA 6.5 on clean Ubuntu 14.04</title>
      <link>https://bikulov.org/blog/2015/02/28/install-cuda-6.5-on-clean-ubuntu-14.04/</link>
      <pubDate>Sat, 28 Feb 2015 08:54:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2015/02/28/install-cuda-6.5-on-clean-ubuntu-14.04/</guid>
      <description>Lately NVIDIA added repository for Ubuntu 12.04 and Ubuntu 14.04. Recently I hit problem with missing dependencies for libcheese-gtk23 and libcheese7 libraries while installing latest CUDA 6.5 on clean Ubuntu 14.04. Remedy to this can be found on askubuntu. So, the complete set of commands is below.
At first, add CUDA repository package:
wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_6.5-14_amd64.deb sudo dpkg -i cuda-repo-ubuntu1404_6.5-14_amd64.deb Now, install CUDA:
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade  # install nvidia driver sudo apt-get install nvidia-current # at this point you need to reboot computer  # remove broken packages, beware: some GUI parts of your system will be broken or removed sudo apt-get remove libcheese*  # install CUDA sudo apt-get install cuda  # restore broken GUI parts sudo apt-get install ubuntu-desktop By the way, libcheese is library for video and photo capturing, including enumeration of capturing devices.</description>
    </item>
    
    <item>
      <title>Tips for LXC: creation, autostart, OpenVPN and port forwarding to containers</title>
      <link>https://bikulov.org/blog/2014/10/09/tips-for-lxc-creation-autostart-openvpn-and-port-forwarding-to-containers/</link>
      <pubDate>Thu, 09 Oct 2014 10:02:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/10/09/tips-for-lxc-creation-autostart-openvpn-and-port-forwarding-to-containers/</guid>
      <description>I&amp;rsquo;ve completed setting up my comfort set of LXC containers and want to save some points I spent a lot of time for or things for copy-paste.
I used the official Ubuntu Server Guide but note at Digital Ocean knowledge base also helped me a lot. I created 3 containers: one for vpn, one for site on Drupal and last one as www proxy for second one with nginx only.</description>
    </item>
    
    <item>
      <title>Setup Drupal 7 with nginx and PostgreSQL on Ubuntu 14.04</title>
      <link>https://bikulov.org/blog/2014/08/09/setup-drupal-7-with-nginx-and-postgresql-on-ubuntu-14.04/</link>
      <pubDate>Sat, 09 Aug 2014 17:34:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/08/09/setup-drupal-7-with-nginx-and-postgresql-on-ubuntu-14.04/</guid>
      <description>This note is similar to previous drupal and joomla installations. Install requirements (webserver, php5, DB server, DB adapter for php) as root:
apt-get install -y nginx php5-fpm nginx postgresql php5-pgsql php5-gd Create user and database (replace USER with desired username and HOSTNAME_db with database name, we will need this values in Drupal setup later) for future site:
sudo -u postgres -i createuser USER --pwprompt --encrypted createdb HOSTNAME_db exit Now setup nginx.</description>
    </item>
    
    <item>
      <title>Install up-to-date scientific environment in Ubuntu 14.04 with Python 3.4</title>
      <link>https://bikulov.org/blog/2014/05/14/install-up-to-date-scientific-environment-in-ubuntu-14.04-with-python-3.4/</link>
      <pubDate>Wed, 14 May 2014 16:16:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/05/14/install-up-to-date-scientific-environment-in-ubuntu-14.04-with-python-3.4/</guid>
      <description>Note: I&amp;rsquo;ve created an updated page with most recent instructions for Jupyter Notebook.
I use IPython notebook for processing numerical experiments results and plotting. The default Python 3 in Ubuntu 14.04 is 3.4, so it is easier to install really up-to-date bunch of software.
Full set of commands you need to install recent ipython notebook, numpy, scipy, etc in virtual environment almost without affecting shiny-new Ubuntu 14.04.
#!/usr/bin/env bash  sudo su # install python development packages and g++ apt-get install -y python3-dev g++  # install dependencies for scipy apt-get install -y libblas-dev liblapack-dev gfortran  # install dependencies for matplotlib apt-get install -y libfreetype6-dev libpng-dev exit  # ipython notebook has bug: # https://bugs.</description>
    </item>
    
    <item>
      <title>SSH config for multiple hops in Linux</title>
      <link>https://bikulov.org/blog/2014/01/25/ssh-config-for-multiple-hops-in-linux/</link>
      <pubDate>Sat, 25 Jan 2014 16:32:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2014/01/25/ssh-config-for-multiple-hops-in-linux/</guid>
      <description>Often some hosts in corporate network are available only from several gateway machines. The scheme looks like that: you connect to gateway ssh -A gateway.public.net and then to desired host from gateway machines ssh -A host.private.net. But the problem arises when you want to copy or download something from host.private.net. You have to do it in two hops, because host.private.net is not available from your machine directly. The solution is ssh forwarding.</description>
    </item>
    
    <item>
      <title>Sort strings from file in C&#43;&#43;</title>
      <link>https://bikulov.org/blog/2013/11/19/sort-strings-from-file-in-c-/</link>
      <pubDate>Tue, 19 Nov 2013 23:53:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/11/19/sort-strings-from-file-in-c-/</guid>
      <description>The very simple and common test program is to read bunch of strings from input file (let it be input.txt), sort them and write down to another file (output.txt). There is an implementation with small bug: it adds extra empty line. I&amp;rsquo;ve modified original code a bit, so now it works correctly (note: if have last empty line in the input, you will have an empty line in the output). Fixed code is provided below.</description>
    </item>
    
    <item>
      <title>Randomized quicksort implementation in C&#43;&#43;</title>
      <link>https://bikulov.org/blog/2013/11/07/randomized-quicksort-implementation-in-c-/</link>
      <pubDate>Thu, 07 Nov 2013 18:27:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/11/07/randomized-quicksort-implementation-in-c-/</guid>
      <description>Quicksort has $O(N\log(N))$ computational complexity in best and average cases, $O(N^{2})$ for bad case. Extremely bad cases may be avoided by using randomized Quicksort.
Qucksort algorithm consists of three steps:
 Choose reference element called pivot (in randomized version pivot choise is random) Rearrange array so that all elements smaller than pivot are placed before the pivot in array, all elements bigger than pivot are placed after the pivot Call Quicksort for elements before the pivot and Quicksort for elements after the pivot recursively (stop if array size is one or less)  My implementation of Quicksort in C++ is provided below.</description>
    </item>
    
    <item>
      <title>Heapsort implementation in C&#43;&#43;</title>
      <link>https://bikulov.org/blog/2013/11/04/heapsort-implementation-in-c-/</link>
      <pubDate>Mon, 04 Nov 2013 21:33:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/11/04/heapsort-implementation-in-c-/</guid>
      <description>Heapsort is one of the fastest sorting algorithms. The best and the worst cases for heapsort have same $O(n\log(n))$ performance.
At first heapsort creates heap from data with buildHeap function. Heap is organized in linear array as follows. Every $i$-th element has two children: $(2i)$-th element and $(2i+1)$-th one. The biggest element of the array is placed on the top of the heap.
After heap building top element is swapped with the latest in the array, then heap is rebuilt for the array with size decreased by one.</description>
    </item>
    
    <item>
      <title>Command line arguments in C and C&#43;&#43; with gengetopt</title>
      <link>https://bikulov.org/blog/2013/10/26/command-line-arguments-in-c-and-c-with-gengetopt/</link>
      <pubDate>Sat, 26 Oct 2013 00:03:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/10/26/command-line-arguments-in-c-and-c-with-gengetopt/</guid>
      <description>Gengetopt is a tool for parsing command line arguments in C and C++ applications. It generates cmdline.c and cmdline.h files in pure C, which contain parser, helper functions, error handling and structure to store argument values. Arguments to be included in auto-generated file are defined in config. I usually gengetopt config file as cmdline.ggo. In this note I provide an example of gengetopt config file and arguments usage in code.</description>
    </item>
    
    <item>
      <title>Creation of paper-ready plots with matlotlib</title>
      <link>https://bikulov.org/blog/2013/10/03/creation-of-paper-ready-plots-with-matlotlib/</link>
      <pubDate>Thu, 03 Oct 2013 10:37:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/10/03/creation-of-paper-ready-plots-with-matlotlib/</guid>
      <description>I used to utilize gnuplot for creation of plots with arbitrary data. The main problem was to postprocess data before plotting: I had to integrate postprocess into calculation code itself or to write additional script to do so. I&amp;rsquo;d like to provide an example of good-looking plotting with Python and matplotlib. Python has bataries included, so there will be no problem with preparation of data to be plotted.
Example script plot_example.</description>
    </item>
    
    <item>
      <title>Using CUDA C&#43;&#43; functions in Python via `*.so` and ctypes</title>
      <link>https://bikulov.org/blog/2013/10/01/using-cuda-c-functions-in-python-via-.so-and-ctypes/</link>
      <pubDate>Tue, 01 Oct 2013 08:33:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/10/01/using-cuda-c-functions-in-python-via-.so-and-ctypes/</guid>
      <description>I&amp;rsquo;d like to show how to use HPC part written on C++ with CUDA in Python code. So, every heavy part may be done on GPU with CUDA, all gluing tasks (with beautiful matplotlib plots) are done on CPU with Python.
We will use shared object, compiled from C++ CUDA code in Python. The only uncertain part here is conversation of types from «high-level» Python ones to «low-level» C++ ones. We will write application for parallel calculation of elementwise sum for two arrays.</description>
    </item>
    
    <item>
      <title>Email notification if IP is changed with Python and cron</title>
      <link>https://bikulov.org/blog/2013/09/09/email-notification-if-ip-is-changed-with-python-and-cron/</link>
      <pubDate>Mon, 09 Sep 2013 23:24:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/09/09/email-notification-if-ip-is-changed-with-python-and-cron/</guid>
      <description>This Python script retrieves computer&amp;rsquo;s external IP address (using internet.yandex.ru) and emails message with new IP if IP has been changed since last check. BeautifulSoup module is needed, so install it if you have no installed version:
sudo pip install beautifulsoup Script:
#!/usr/bin/env python  from BeautifulSoup import BeautifulSoup import urllib2 import re import smtplib from email.mime.text import MIMEText  logFile = &amp;#39;/var/log/ippywatchdog.log&amp;#39;  request = urllib2.urlopen(&amp;#39;http://internet.yandex.ru&amp;#39;)  soup = BeautifulSoup(request) yandexIpResponse = soup.</description>
    </item>
    
    <item>
      <title>Universal simple Makefile</title>
      <link>https://bikulov.org/blog/2013/09/02/universal-simple-makefile/</link>
      <pubDate>Mon, 02 Sep 2013 18:05:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/09/02/universal-simple-makefile/</guid>
      <description>I often work on my netbook, so I prefer to use Sublime Text with Makefiles instead of full-featured IDEs. To automate build process I&amp;rsquo;ve constructed (with help of Vasily Picard and examples from the Internet) universal Makefile. It assumes the following structure of files.
All sources are placed in the src subdirectory. Intermediate object files are placed in obj subdirectory, it must be created before compilation. Resulting binary file is placed into bin subdirectory.</description>
    </item>
    
    <item>
      <title>Install and configure btsync in Ubuntu 12.04</title>
      <link>https://bikulov.org/blog/2013/08/26/install-and-configure-btsync-in-ubuntu-12.04/</link>
      <pubDate>Mon, 26 Aug 2013 18:42:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/26/install-and-configure-btsync-in-ubuntu-12.04/</guid>
      <description>This note describes installation of Bittorrent Sync on Ubuntu. Tutorial was tested on Ubuntu 12.04, but it must work for all Debian-based systems. Read full btsync manual for advanced information.
#&amp;nbsp;Download and install btsync Btsync is provided as single binary file. We will place it into /usr/bin directory. So, download archive with binary file, extract it, remove archive, move binary:
wget http://btsync.s3-website-us-east-1.amazonaws.com/btsync_x64.tar.gz tar xf btsync_x64.tar.gz rm btsync_x64.tar.gz sudo mv btsync /usr/bin/btsync #&amp;nbsp;Configure shared folder We will use configuration file instead of web interface.</description>
    </item>
    
    <item>
      <title>Setting up Joomla 3.1.5 with PostgreSQL on Ubuntu 13.04</title>
      <link>https://bikulov.org/blog/2013/08/19/setting-up-joomla-3.1.5-with-postgresql-on-ubuntu-13.04/</link>
      <pubDate>Mon, 19 Aug 2013 16:15:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/19/setting-up-joomla-3.1.5-with-postgresql-on-ubuntu-13.04/</guid>
      <description>#&amp;nbsp;Installing dependencies Firstly you need to install webserver, php-related stuff and database server (we use PostgreSQL).
apt-get install -y php5-fpm nginx postgresql php5-pgsql Now download and install Joomla (currently 3.1.5 is the latest). Please, update following lines with latest version if nescessary:
cd /srv wget http://joomlacode.org/gf/download/frsrelease/18622/83487/Joomla_3.1.5-Stable-Full_Package.zip unzip Joomla_3.1.5-Stable-Full_Package.zip -d joomla chown -R www-data:www-data joomla #&amp;nbsp;Database setup The only two things you need to do is to create user (joomla in example) and database (joomla in example).</description>
    </item>
    
    <item>
      <title>Configuring Ubuntu 12.04 in OpenVZ on CentOS 6.4</title>
      <link>https://bikulov.org/blog/2013/08/08/configuring-ubuntu-12.04-in-openvz-on-centos-6.4/</link>
      <pubDate>Thu, 08 Aug 2013 20:54:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2013/08/08/configuring-ubuntu-12.04-in-openvz-on-centos-6.4/</guid>
      <description>This howto is based on two sources: Official wiki and Amutu blog entry. In short, the main difficulty is in bridge network configuration: correct network configuration doesn&amp;rsquo;t work in CentOS 6.4 while NetworkManager is running. I compiled official documentation and fix found in Amutu blog here in one entry.
I assume you have clean installed CentOS. I tried all on x32 hardware, so you may need to fix container type in container creation section if you use x64 CentOS.</description>
    </item>
    
    <item>
      <title>Setting up RhodeCode on Ubuntu 12.04</title>
      <link>https://bikulov.org/blog/2012/10/29/setting-up-rhodecode-on-ubuntu-12.04/</link>
      <pubDate>Mon, 29 Oct 2012 09:00:00 +0300</pubDate>
      
      <guid>https://bikulov.org/blog/2012/10/29/setting-up-rhodecode-on-ubuntu-12.04/</guid>
      <description>This howto is based on a great guide with modifications. All settings are made for server domain hg.kenarius.org. You can replace it with your one easily.
#&amp;nbsp;Preparation #&amp;nbsp;Ubuntu Update Ubuntu with the commands:
sudo apt-get update sudo apt-get upgrade Install pip and virtualenv with the commands:
sudo apt-get install python-pip sudo pip install virtualenv #&amp;nbsp;Nginx Install nginx:
sudo apt-get install nginx Add create ssl certificates:
sudo openssl req -new -x509 -days 9999 -nodes -out host.</description>
    </item>
    
  </channel>
</rss>
